[
    {
        "key": "closing_brace",
        "category": "SwiftLint",
        "name": "Closing Brace Spacing",
        "description": "Closing brace with closing parenthesis should not have any whitespaces in the middle.",
        "severity": "MINOR"
    },
    {
        "key": "closure_spacing",
        "category": "SwiftLint",
        "name": "Closure Spacing",
        "description": "Closure expressions should have a single space inside each brace.",
        "severity": "MINOR"
    },
    {
        "key": "colon",
        "category": "SwiftLint",
        "name": "Colon",
        "description": "Colons should be next to the identifier when specifying a type.",
        "severity": "MINOR"
    },
    {
        "key": "comma",
        "category": "SwiftLint",
        "name": "Comma Spacing",
        "description": "There should be no space before and one after any comma.",
        "severity": "MINOR"
    },
    {
        "key": "conditional_returns_on_newline",
        "category": "SwiftLint",
        "name": "Conditional Returns on Newline",
        "description": "Conditional statements should always return on the next line",
        "severity": "MINOR"
    },
    {
        "key": "control_statement",
        "category": "SwiftLint",
        "name": "Control Statement",
        "description": "if,for,while,do statements shouldn't wrap their conditionals in parentheses.",
        "severity": "MINOR"
    },
    {
        "key": "custom_rules",
        "category": "SwiftLint",
        "name": "Customs",
        "description": "Create custom rules by providing a regex string. Optionally specify what syntax kinds to match against, the severity level, and what message to display.",
        "severity": "MINOR"
    },
    {
        "key": "cyclomatic_complexity",
        "category": "SwiftLint",
        "name": "Cyclomatic Complexity",
        "description": "Complexity of function bodies should be limited.",
        "severity": "CRITICAL"
    },
    {
        "key": "empty_count",
        "category": "SwiftLint",
        "name": "Empty Count",
        "description": "Prefer checking `isEmpty` over comparing `count` to zero.",
        "severity": "MINOR"
    },
    {
        "key": "explicit_init",
        "category": "SwiftLint",
        "name": "Explicit Init",
        "description": "Explicitly calling .init() should be avoided.",
        "severity": "MINOR"
    },
    {
        "key": "file_length",
        "category": "SwiftLint",
        "name": "File Line Length",
        "description": "Files should not span too many lines.",
        "severity": "MAJOR"
    },
    {
        "key": "force_cast",
        "category": "SwiftLint",
        "name": "Force Cast",
        "description": "Force casts should be avoided.",
        "severity": "MAJOR"
    },
    {
        "key": "force_try",
        "category": "SwiftLint",
        "name": "Force Try",
        "description": "Force tries should be avoided.",
        "severity": "MAJOR"
    },
    {
        "key": "force_unwrapping",
        "category": "SwiftLint",
        "name": "Force Unwrapping",
        "description": "Force unwrapping should be avoided.",
        "severity": "MAJOR"
    },
    {
        "key": "function_body_length",
        "category": "SwiftLint",
        "name": "Function Body Length",
        "description": "Functions bodies should not span too many lines.",
        "severity": "MAJOR"
    },
    {
        "key": "function_parameter_count",
        "category": "SwiftLint",
        "name": "Function Parameter Count",
        "description": "Number of function parameters should be low.",
        "severity": "MINOR"
    },
    {
        "key": "implicit_getter",
        "category": "SwiftLint",
        "name": "Implicit Getter",
        "description": "Computed read-only properties should avoid using the get keyword.",
        "severity": "MINOR"
    },
    {
        "key": "leading_whitespace",
        "category": "SwiftLint",
        "name": "Leading Whitespace",
        "description": "Files should not contain leading whitespace.",
        "severity": "MINOR"
    },
    {
        "key": "legacy_cggeometry_functions",
        "category": "SwiftLint",
        "name": "Legacy CGGeometry Functions",
        "description": "Struct extension properties and methods are preferred over legacy functions",
        "severity": "MINOR"
    },
    {
        "key": "legacy_constant",
        "category": "SwiftLint",
        "name": "Legacy Constant",
        "description": "Struct-scoped constants are preferred over legacy global constants.",
        "severity": "MINOR"
    },
    {
        "key": "legacy_constructor",
        "category": "SwiftLint",
        "name": "Legacy Constructor",
        "description": "Swift constructors are preferred over legacy convenience functions.",
        "severity": "MINOR"
    },
    {
        "key": "legacy_nsgeometry_functions",
        "category": "SwiftLint",
        "name": "Legacy NSGeometry Functions",
        "description": "Struct extension properties and methods are preferred over legacy functions",
        "severity": "MINOR"
    },
    {
        "key": "line_length",
        "category": "SwiftLint",
        "name": "Line Length",
        "description": "Lines should not span too many characters.",
        "severity": "MAJOR"
    },
    {
        "key": "mark",
        "category": "SwiftLint",
        "name": "Mark",
        "description": "MARK comment should be in valid format.",
        "severity": "MINOR"
    },
    {
        "key": "missing_docs",
        "category": "SwiftLint",
        "name": "Missing Docs",
        "description": "Public declarations should be documented.",
        "severity": "MINOR"
    },
    {
        "key": "nesting",
        "category": "SwiftLint",
        "name": "Nesting",
        "description": "Types should be nested at most 1 level deep, and statements should be nested at most 5 levels deep.",
        "severity": "CRITICAL"
    },
    {
        "key": "nimble_operator",
        "category": "SwiftLint",
        "name": "Nimble Operator",
        "description": "Prefer Nimble operator overloads over free matcher functions.",
        "severity": "MINOR"
    },
    {
        "key": "opening_brace",
        "category": "SwiftLint",
        "name": "Opening Brace Spacing",
        "description": "Opening braces should be preceded by a single space and on the same line as the declaration.",
        "severity": "MINOR"
    },
    {
        "key": "operator_whitespace",
        "category": "SwiftLint",
        "name": "Operator Function Whitespace",
        "description": "Operators should be surrounded by a single whitespace when defining them.",
        "severity": "MINOR"
    },
    {
        "key": "overridden_super_call",
        "category": "SwiftLint",
        "name": "Overridden methods call super",
        "description": "Some overridden methods should always call super",
        "severity": "MINOR"
    },
    {
        "key": "private_outlet",
        "category": "SwiftLint",
        "name": "Private Outlets",
        "description": "IBOutlets should be private to avoid leaking UIKit to higher layers.",
        "severity": "MINOR"
    },
    {
        "key": "private_unit_test",
        "category": "SwiftLint",
        "name": "Private Unit Test",
        "description": "Unit tests marked private are silently skipped.",
        "severity": "MINOR"
    },
    {
        "key": "redundant_nil_coalescing",
        "category": "SwiftLint",
        "name": "Redundant Nil Coalescing",
        "description": "nil coalescing operator is only evaluated if the lhs is nil , coalescing operator with nil as rhs is redundant",
        "severity": "MINOR"
    },
    {
        "key": "return_arrow_whitespace",
        "category": "SwiftLint",
        "name": "Returning Whitespace",
        "description": "Return arrow and return type should be separated by a single space or on a separate line.",
        "severity": "MINOR"
    },
    {
        "key": "statement_position",
        "category": "SwiftLint",
        "name": "Statement Position",
        "description": "Else and catch should be on the same line, one space after the previous declaration.",
        "severity": "MINOR"
    },
    {
        "key": "switch_case_on_newline",
        "category": "SwiftLint",
        "name": "Switch Case on Newline",
        "description": "Cases inside a switch should always be on a newline",
        "severity": "MINOR"
    },
    {
        "key": "syntactic_sugar",
        "category": "SwiftLint",
        "name": "Syntactic Sugar",
        "description": "Shorthand syntactic sugar should be used, i.e. [Int] instead of Array<Int>",
        "severity": "MINOR"
    },
    {
        "key": "todo",
        "category": "SwiftLint",
        "name": "Todo",
        "description": "TODOs and FIXMEs should be avoided.",
        "severity": "MINOR"
    },
    {
        "key": "trailing_comma",
        "category": "SwiftLint",
        "name": "Trailing Comma",
        "description": "Trailing commas in arrays and dictionaries should be avoided/enforced.",
        "severity": "MINOR"
    },
    {
        "key": "trailing_newline",
        "category": "SwiftLint",
        "name": "Trailing Newline",
        "description": "Files should have a single trailing newline.",
        "severity": "MINOR"
    },
    {
        "key": "trailing_semicolon",
        "category": "SwiftLint",
        "name": "Trailing Semicolon",
        "description": "Lines should not have trailing semicolons.",
        "severity": "MINOR"
    },
    {
        "key": "trailing_whitespace",
        "category": "SwiftLint",
        "name": "Trailing Whitespace",
        "description": "Lines should not have trailing whitespace.",
        "severity": "MINOR"
    },
    {
        "key": "type_body_length",
        "category": "SwiftLint",
        "name": "Type Body Length",
        "description": "Type bodies should not span too many lines.",
        "severity": "MAJOR"
    },
    {
        "key": "type_name",
        "category": "SwiftLint",
        "name": "Type Name",
        "description": "Type name should only contain alphanumeric characters, start with an uppercase character and span between 3 and 40 characters in length.",
        "severity": "MINOR"
    },
    {
        "key": "valid_docs",
        "category": "SwiftLint",
        "name": "Valid Docs",
        "description": "Documented declarations should be valid.",
        "severity": "MINOR"
    },
    {
        "key": "valid_ibinspectable",
        "category": "SwiftLint",
        "name": "Valid IBInspectable",
        "description": "@IBInspectable should be applied to variables only, have its type explicit and be of a supported type",
        "severity": "MINOR"
    },
    {
        "key": "variable_name",
        "category": "SwiftLint",
        "name": "Variable Name",
        "description": "Variable names should only contain alphanumeric characters and start with a lowercase character or should only contain capital letters. In an exception to the above, variable names may start with a capital letter when they are declared static and immutable. Variable names should not be too long or too short.",
        "severity": "CRITICAL"
    },
    {
        "key": "vertical_whitespace",
        "category": "SwiftLint",
        "name": "Vertical Whitespace",
        "description": "Limit vertical whitespace to a single empty line.",
        "severity": "MINOR"
    },
    {
        "key": "weak_delegate",
        "category": "SwiftLint",
        "name": "Weak Delegate",
        "description": "Delegates should be weak to avoid reference cycles.",
        "severity": "MINOR"
    }
]